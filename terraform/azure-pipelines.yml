# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  backend_sa_rg: 'devops-rg'
  backend_sa: 'devopsryanstorage01'
  backend_container: 'kubernetes-project-1-tfstate'
  backend_sa_key: 'resources.tfstate'

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'ryan_service_connection'
              backendAzureRmResourceGroupName: '$(backend_sa_rg)'
              backendAzureRmStorageAccountName: '$(backend_sa)'
              backendAzureRmContainerName: '$(backend_container)'
              backendAzureRmKey: '$(backend_sa_key)'
              workingDirectory: '$(Build.SourcesDirectory)/terraform'
              additionalArgs: '-upgrade'
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(Build.SourcesDirectory)/terraform'
  - stage: tfplan
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
    - job: plan
      steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
              workingDirectory: '$(Build.SourcesDirectory)/terraform'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'ryan_service_connection'
              backendAzureRmResourceGroupName: '$(backend_sa_rg)'
              backendAzureRmStorageAccountName: '$(backend_sa)'
              backendAzureRmContainerName: '$(backend_container)'
              backendAzureRmKey: '$(backend_sa_key)'
              workingDirectory: '$(Build.SourcesDirectory)/terraform'
              additionalArgs: '-upgrade'
          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'ryan_service_connection'
              workingDirectory: '$(Build.SourcesDirectory)/terraform'
  - stage: tfdeploy
    condition: succeeded('tfplan')
    dependsOn: tfplan
    jobs:
    - job: apply
      steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'ryan_service_connection'
              backendAzureRmResourceGroupName: '$(backend_sa_rg)'
              backendAzureRmStorageAccountName: '$(backend_sa)'
              backendAzureRmContainerName: '$(backend_container)'
              backendAzureRmKey: '$(backend_sa_key)'
              workingDirectory: '$(Build.SourcesDirectory)/terraform'
              additionalArgs: '-upgrade'
          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'ryan_service_connection'
              workingDirectory: '$(Build.SourcesDirectory)/terraform'
          - task: TerraformTaskV4@4
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'ryan_service_connection'
              workingDirectory: '$(Build.SourcesDirectory)/terraform'
      
          
